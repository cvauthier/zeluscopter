open Physics
open Controller
open Parameters

let t0 = 5.0

let node random () = (2.0 *. (World.random_float 1.0) -. 1.0)

let hybrid drone () =
	((x,y,z),(vx,vy,vz),(ax,ay,az),(phi,theta,psi),(phidot,thetadot,psidot)) where
	
	rec der t = 1.0 init 0.0

	and der x = vx init 0.0
	and der y = vy init 0.0
	and der z = vz init Parameters.init_z
	
	and der vx = ax init 0.0
	and der vy = ay init 0.0
	and der vz = az init 0.0
	
	and (ax,ay,az) = acceleration (inputs,(vx,vy,vz),(phi,theta,psi))
	
	and der wx = aax init 0.0 reset up (t -. t0) -> random ()
	and der wy = aay init 0.0 reset up (t -. t0) -> random ()
	and der wz = aaz init 0.0 reset up (t -. t0) -> random ()
	and (aax,aay,aaz) = angular_acceleration (inputs,(wx,wy,wz))
	
	and der phi = phidot init 0.0 reset | up (last phi -. pi) -> -. pi
																			| up (-. pi -. last phi) -> pi
	and der theta = thetadot init 0.0 
	and der psi = psidot init 0.0 reset | up (last psi -. pi) -> -. pi
																			| up (-. pi -. last psi) -> pi
	and (phidot,thetadot,psidot) = omega_to_thetadot((wx,wy,wz),(phi,theta,psi))

	and inputs = Controller.simulate_controller ((ax,ay,az),(wx,wy,wz))

(* ** plotting ** *)

open Scope

let node plot (t,((x,y,z),(vx,vy,vz),(ax,ay,az),(phi,theta,psi),(phidot,thetadot,psidot))) =
  let s1 = scope (-0.02, 0.02, ("phi", linear, phi)) in
  let s2 = scope (-0.02, 0.02, ("theta", linear, theta)) in
  let s3 = scope (-0.02, 0.02, ("psi", linear, psi)) in
  let s4 = scope (-0.1, 0.1, ("ax", linear, ax)) in
	let s5 = scope (0.0, 1.0, ("z", linear, -. z)) in
  window5 ("drone", 10.0, t, s1, s2, s3, s4, s5)

(* ** main ** *)

let hybrid main () = 
  let der t = 1.0 init 0.0 in
  let data = drone () in
  present (period (0.10)) -> plot (t,data); ()

let node world (pos,angles)  =
  let rec world = (World.create pos angles) fby world in
  World.update world pos angles

let hybrid main3d () = let
  rec der t = 1.0 init 0.0
	and data = drone () 
	and ((x,y,z),(vx,vy,vz),(ax,ay,az),(phi,theta,psi),(phidot,thetadot,psidot)) = data
  in present
     | (period (0.05)) ->
          let () = world ((x,y,z),(phi,theta,psi)) in plot (t,data)
     else ()

