open Matrix
open Parameters
open Physics

let pi = 3.1416

let node random () = (2.0 *. (Tools.random_float 1.0) -. 1.0)

let node sensor (value,sigma) = value +. (Tools.random_normal ()) *. sigma

let hybrid get_inputs ((ax,ay,az),(wx,wy,wz)) = (i1,i2,i3,i4) where
	rec init i1 = 0.0
	and init i2 = 0.0
	and init i3 = 0.0
	and init i4 = 0.0
	and present (period (Controller.step)) ->

		let accel_error = 0.25 *. g and gyro_error = 0.25 *. pi /. 180. in
	
		let accel_x = sensor (last ax, accel_error)
		and accel_y = sensor (last ay, accel_error)
		and accel_z = sensor (last az, accel_error)
		and gyro_x = sensor (wx, gyro_error)
		and gyro_y = sensor (wy, gyro_error)
		and gyro_z = sensor (wz, gyro_error) in

		do (i1,i2,i3,i4) = Controller.controller ((accel_x,accel_y,accel_z),(gyro_x,gyro_y,gyro_z)) done

let hybrid drone () =
	((x,y,z),(vx,vy,vz),(ax,ay,az),(phi,theta,psi),(phidot,thetadot,psidot)) where
	
	rec der x = vx init 0.0
	and der y = vy init 0.0
	and der z = vz init -10.0
	
	and der vx = ax init 0.0
	and der vy = ay init 0.0
	and der vz = az init 0.0
	
	and (ax,ay,az) = acceleration (inputs,(vx,vy,vz),(phi,theta,psi))
	
	and der wx = aax init random ()
	and der wy = aay init random ()
	and der wz = aaz init random ()
	and (aax,aay,aaz) = angular_acceleration (inputs,(wx,wy,wz))
	
	and der phi = phidot init 0.0 reset | up (last phi -. pi) -> -. pi
																			| up (-. pi -. last phi) -> pi
	and der theta = thetadot init 0.0 
	and der psi = psidot init 0.0 reset | up (last psi -. pi) -> -. pi
																			| up (-. pi -. last psi) -> pi
	and (phidot,thetadot,psidot) = omega_to_thetadot((wx,wy,wz),(phi,theta,psi))

	and inputs = get_inputs ((ax,ay,az),(wx,wy,wz))

(* ** plotting ** *)

open Scope

let node plot (t,((x,y,z),(vx,vy,vz),(ax,ay,az),(phi,theta,psi),(phidot,thetadot,psidot))) =
  let s1 = scope (-0.05, 0.05, ("phi", linear, phi)) in
  let s2 = scope (-0.05, 0.05, ("psi", linear, psi)) in
  let s3 = scope (-0.1, 0.1, ("ax", linear, ax)) in
	let s4 = scope (5.0, 15.0, ("z", linear, -. z)) in
  window4 ("drone", 10.0, t, s1, s2, s3, s4)

(* ** main ** *)

let hybrid main () = 
  let der t = 1.0 init 0.0 in
  let data = drone () in
  present (period (0.10)) -> plot (t,data); ()

