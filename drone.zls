open Physics
open Controller
open Parameters

let t0 = 5.0

let node random () = (2.0 *. (World.random_float 1.0) -. 1.0)

let hybrid drone (xd,yd,zd) =
	((x,y,z),(vx,vy,vz),(ax,ay,az),(phi,theta,psi),(phidot,thetadot,psidot)) where
	
	rec der t = 1.0 init 0.0

	and der x = vx init 0.0
	and der y = vy init 0.0
	and der z = vz init Parameters.init_z
	
	and der vx = ax init 0.0
	and der vy = ay init 0.0
	and der vz = az init 0.0
	
	and (ax,ay,az) = acceleration (inputs,(vx,vy,vz),(phi,theta,psi))
	
	and der wx = aax init 0.0 reset up (t -. t0) -> random ()
	and der wy = aay init 0.0 reset up (t -. t0) -> random ()
	and der wz = aaz init 0.0 reset up (t -. t0) -> random ()
	and (aax,aay,aaz) = angular_acceleration (inputs,(wx,wy,wz))
	
	and der phi = phidot init 0.0 reset | up (last phi -. pi) -> -. pi
																			| up (-. pi -. last phi) -> pi
	and der theta = thetadot init 0.0 
	and der psi = psidot init 0.0 reset | up (last psi -. pi) -> -. pi
																			| up (-. pi -. last psi) -> pi
	and (phidot,thetadot,psidot) = omega_to_thetadot((wx,wy,wz),(phi,theta,psi))

	and (body_ax,body_ay,body_az) = Matrix.mat33xvec3 (inertial_to_body (phi,theta,psi), (ax,ay,az)) 
	and inputs = Controller.simulate_controller ((body_ax,body_ay,body_az),(wx,wy,wz),(xd,yd,zd))

(* ** plotting ** *)

open Scope

let node plot (t,((x,y,z),(vx,vy,vz),(ax,ay,az),(phi,theta,psi),(phidot,thetadot,psidot)),(xd,yd,zd)) =
  (*let s1 = scope (-0.01, 0.01, ("phi", linear, phi)) in
  let s2 = scope (-0.01, 0.01, ("theta", linear, theta)) in
  let s3 = scope (-0.01, 0.01, ("psi", linear, psi)) in
 	let () = window3 ("drone", 10.0, t, s1, s2, s3) in*)
	let s5 = scope (-1.0, 1.0, ("x", linear, x)) in
	let s6 = scope (-1.0, 1.0, ("y", linear, y)) in
	let s7 = scope (0.0, 1.0, ("-z", linear, -. z)) in
	window3 ("drone", 10.0, t, s5, s6, s7)

(* ** main ** *)

let hybrid main () = 
  let der t = 1.0 init 0.0 in
  let data = drone (0.0,0.0,init_z) in
  present (period (0.10)) -> plot (t,data,(0.0,0.0,init_z)); ()

let node world (pos,angles)  =
  let rec world = (World.create pos angles) fby world in
  World.update world pos angles

let hybrid main3d () = let
  rec der t = 1.0 init 0.0
	and data = drone (xd,yd,zd) 
	and ((x,y,z),(vx,vy,vz),(ax,ay,az),(phi,theta,psi),(phidot,thetadot,psidot)) = data
  and init xd = 0.0
	and init yd = 0.0
	and init zd = 0.0
	and present (period (0.05)) -> 
		do (xd,yd,zd) = world ((0.0 -> last x, 0.0 -> last y,init_z -> last z),
													 (0.0 -> last phi, 0.0 -> last theta, 0.0 -> last psi)) done
	in present
     | (period (0.10)) -> plot (t,data,(xd,yd,zd))
     else ()

